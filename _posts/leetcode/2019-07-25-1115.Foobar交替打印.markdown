我们提供一个类：

```java
class FooBar {
  public void foo() {
    for (int i = 0; i < n; i++) {
      print("foo");
    }
  }

  public void bar() {
    for (int i = 0; i < n; i++) {
      print("bar");
    }
  }
}
```

两个不同的线程将会共用一个 FooBar 实例。其中一个线程将会调用 foo() 方法，另一个线程将会调用 bar() 方法。

请设计修改程序，以确保 "foobar" 被输出 n 次。

来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/print-foobar-alternately

我的思路是很简单，一看代码就知道了：

```java
class FooBar {
    private int n;
    private volatile boolean printfoo=true;

    public FooBar(int n) {
        this.n = n;
    }

    public void foo(Runnable printFoo) throws InterruptedException {
        
        for (int i = 0; i < n; i++) {
            
        	// printFoo.run() outputs "foo". Do not change or remove this line.
            if(printfoo){
                printFoo.run();
                printfoo=false;
            }else{
                i--;//如果printfoo为false，i++就没有意义了，因为它没有打印东西
            }
        	    
        }
    }

    public void bar(Runnable printBar) throws InterruptedException {
        
        for (int i = 0; i < n; i++) {
            
            // printBar.run() outputs "bar". Do not change or remove this line.
            if(!printfoo){
                printBar.run();
                printfoo=true;
            }else{
                i--;
            }
        	
        }
    }
}
```

执行用时 :43 ms, 在所有 Java 提交中击败了58.29%的用户

内存消耗 :38.2 MB, 在所有 Java 提交中击败了100.00%的用户

其他同学，我看了看评论，觉得用信号量也是不错的实现：

```java
import java.util.concurrent.Semaphore;
class FooBar {
    private int n;
    private Semaphore semaphoreFoo = new Semaphore(0);
    private Semaphore semaphoreBar = new Semaphore(1);
    public FooBar(int n) {
        this.n = n;
    }

    public void foo(Runnable printFoo) throws InterruptedException {
        
         for (int i = 0; i < n; i++) {
              semaphoreBar.acquire();
              printFoo.run();
              semaphoreFoo.release();
          }
    }

    public void bar(Runnable printBar) throws InterruptedException {
        
      for (int i = 0; i < n; i++) {
          semaphoreFoo.acquire();
          printBar.run();
          semaphoreBar.release();
        }
    }
}
```

