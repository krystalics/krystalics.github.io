前两天详细看了Java NIO方面的几篇文章，都是几万字的好文章呀，真的是让我对NIO从不懂到入门。现在虽然是周六，但是闲着无事，还是要学习的——Mmmm，就先学他半小时吧。

---

因为中篇的内容挺少的，所以笔记就想着和下篇一起做了，希望今晚的时间来得及。

中篇讲的是代码的层次嵌套，也就是各个实体的作用域，实际上和其他语言相差不大，也是内层同名变量覆盖外层，**作用域最大的用处就是对程序实体的访问权限的控制。**那相同的就不记录了，就记录一些可能会出错的点吧。

要和上篇中的变量重声明区分开，变量重声明是在同一个代码块中，作用域是相同的。而覆盖是在不同层级的代码块中。我们可以了解一下，程序实体的查找过程来知道作用域是怎么起作用的。

- 首先，代码引用变量的时候会优先查找当前代码块的变量，
- 其次，如果当前代码块并没有该变量，那么程序就会沿着嵌套关系，从当前代码块开始一层层的往外找
- 一般情况下，程序会一致查到当前代码块的**包**中。如果找不到，就报错

为什么说一般情况下呢？因为我们`import (. "stringutil/flag")` 是可以直接使用该包中的公有实体的，**相当于作用域是相同的，在这种情况下也会到该包中查找变量** 。而也是因为可能发生这种情况，在文件中命名全局变量的时候要注意是否因为这种情况造成变量重复声明错误。

<img src="https://github.com/krystalics/krystalics.github.io/blob/master/_posts/go/img/17.png?raw=true">



