[Function的用法](<http://orchome.com/935>)

JDK 1.8中包含了很多内建的函数式接口，这些接口都使用了 `@FunctionalInterface`注解。

```java
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface FunctionalInterface {}
```

这个注解意味着该接口是函数式接口，只能有一个自定义的方法。也可以从object类继承而来的方法，虽然编译器会自动把只有一个方法的接口视为函数式接口，使用这个注解也算是显示声明了吧。静态方法和默认方法不算抽象方法： static , default

```java
@FunctionalInterface
public interface Function<T,R> {
    R apply(T t);
    default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) {
        Objects.requireNonNull(after);
        return (T t) -> after.apply(apply(t));
    }
    static String test(){
        return "test";
    }
}

```

如果该类中声明了两个抽象方法就会报错 `Invalid @FunctionInterface annotation; ...`，java 8常用的函数式接口如下：

| 接口名    | 类型           | 描述                            |
| --------- | -------------- | ------------------------------- |
| Consumer  | Consumer< T >  | 接收T对象，不返回值             |
| Predicate | Predicate< T > | 接收T对象并返回boolean          |
| Function  | Function<T,R>  | 接收T对象，返回R对象            |
| Supplier  | Supplier< T >  | 提供T对象（例如工厂），不接收值 |



##### Instrument

Java Instrumentation 指的是可以用独立于应用程序之外的代理(agent)程序来监测和协助运行在JVM上的引用程序。通过 Java的 Instrumentation接口来实现

> Instrumentation is the addition of byte-codes to methods for the purpose of gathering data to be utilized by tools.

Instrumentation接口是向方法添加字节代码，用于收集数据而使用的工具



##### ThreadGroup

为了方便管理线程而出现，现在因为stop()，suspend()方法的不安全性导致在被废弃的边缘。它可以统一设定一组线程的属性，安全策略等。

线程组和线程池是两个不同的概念，后者是为了管理线程的生命周期，复用线程，减少创建销毁线程的开销。



##### AQS  

AbstractQueuedSynchronizer 队列同步器，它是构建锁或者其他同步组件的基础框架（如ReentrantLock，ReentrantReadWriteLock，Semaphore等） 它是Java.util.concurrent包的核心基础组件

AQS解决了实现同步器时涉及的大量细节问题，例如获取同步状态，FIFO同步队列。基于AQS来构建同步器中只能有一个时刻发生阻塞，从而降低上下文切换的开销，提高了吞吐量。AQS的主要使用方式是继承，使用int类型的成员变量state来表示同步状态

当state>0时表示已经获得了锁，state=0表示释放锁，它提供了三个方法(getState()，setState(int newState)，compareAndSetState(int expact,int update)) 来对同步状态state进行操作，当然AQS可以确保对state的操作是线程安全的

通过内置的FIFO同步队列来完成资源获取线程的排队工作，如果当前线程获得同步状态（锁）失败时，AQS则会将当前线程以及等待状态等信息构造成一个节点，并将其加入同步队列，同时会阻塞当前线程，当同步状态释放时，则会把节点中的线程唤醒，使其再次尝试获取同步状态。



##### ReentrantLock的介绍

ReentrantLock重入锁，是实现Lock接口的一个类，也是在实际编程中使用频率很高的一个锁，支持重入性，表示对共享资源能够重复加锁，即当前线程获取该锁再次获取不会被阻塞。像synchronize隐式支持重入，通过synchronize通过获取自增，释放自减的方式实现重入。ReentrantLock还支持公平锁和非公平锁两种方式。

公平锁就是先到先得，锁的获取顺序符合请求的时间顺序。构造时传入true为公平锁，false时为非公平锁。它默认是非公平锁，因为公平锁需要保证时间上的绝对顺序，频繁的上下文切换，性能开销增大。

ReentrantLock的使用例子，以《Java核心技术——卷1》中的银行的转账业务的代码为example。

```java
package reentrant;

import java.util.Arrays;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Bank {
    private Lock bankLock = new ReentrantLock();
    private final double[] accounts;
    private static final int NACCOUNTS = 100;
    private static final double INITIAL_BALANCE = 1000;
    private static final double MAX_AMOUNT = 1000;
    private static final int DELAY = 10; //延时10ms

    public Bank(int n, double initialBalance) {
        accounts = new double[n];
        Arrays.fill(accounts, initialBalance); //用 Arrays.fill 进行初始化，值都设为 initialBalance
    }

    // 转转业务，从from 转到 to amount数量的金额
    public void transfer(int from, int to, double amount) {
    //  synchronized (this) 用内置锁也是一样的
        bankLock.lock();
        try {
            System.out.println(Thread.currentThread());
            accounts[from] -= amount;
            System.out.printf("%10.2f from %d to %d", amount, from, to);
            accounts[to] += amount;
            System.out.printf("Total Balance : %10.2f%n", getTotalBalance());
        } finally {
            bankLock.unlock();
        }
    }
//  用于检验是否出现调度出错（就是没锁时会发生的总金额发生增加或者减少）
    public double getTotalBalance() {
        double sum = 0;
        for (double a : accounts) {
            sum += a;
        }
        return sum;
    }

    public int size() {
        return accounts.length;
    }


    public static void main(String[] args) {
        Bank bank = new Bank(NACCOUNTS, INITIAL_BALANCE);
        // 100个账户相互转账， 每个转账间隔时间 Delay*Math.random()
        for (int i = 0; i < NACCOUNTS; i++) {
            int fromAccount =i;
            Runnable r=()->{
              try{
                  while(true){
                      int toAccount=(int) (bank.size()*Math.random());
                      double amount=MAX_AMOUNT*Math.random();
                      bank.transfer(fromAccount,toAccount,amount);
                      Thread.sleep((int)(DELAY*Math.random()));
                  }
              }catch (InterruptedException e){
                  e.printStackTrace();
              }
            };
            Thread t=new Thread(r);
            t.start();
        }
    }
}

```

其实熟悉锁的同学们会发现，其实使用锁的这一块内容改成synchronized也是一样的。没有加锁它的运行情况是这样的：总金额会随着转账业务不断变化。

<img src="https://github.com/krystalics/krystalics.github.io/blob/master/_posts/java/img/14.png?raw=true">

每个Bank对象都有自己的ReentrantLock对象，锁住的是对象本身而不是整个类，不同Bank对象有不同的锁，如果两个线程访问同一个对象就会有一个线程在等待锁的释放，而访问不同对象是不需要的。

##### 条件变量

很多时候线程获得锁之后发现，需要满足某个条件之后他才能执行。Java 中采用一个条件对象Condition来管理哪些已经获得锁但是却不能工作的线程。由于历史原因，条件对象也叫条件变量conditional variable

接着上面的例子，我们知道银行转账前会先检查一下转出账户有没有足够的余额，看到这里我们自然就会写到：

```java
if(account[from]>=amount)
```

在简单的应用场景这样判断是没什么问题的，但是情况一复杂：比如在判断完之后线程被中断，再执行时金额已经被其他账户取走了，而这边的线程还以为余额是够的，就会造成数值错误。**实际上这里就是对加锁进行重复说明锁的重要性**，加个锁就能保证其他线程不能修改余额啦。

```java
while(account[from]<amount){
    // wait 
}
// transfer
```

但如果是余额不足，需要等待其他线程增加余额然后转账，加了锁之后其他线程进不来，就会导致一直阻塞在这里（实际上，没钱就返回一个结果说没钱不就好了，不过这里的例子是为了让我们更好的理解Condition对象，就不管他的逻辑漏洞啦）

这就是为什么需要条件对象的原因：一个**锁对象可以有一个或多个相关的条件对象**，可以用 newCondition方法获得一个条件对象，如下：

```java
private Condition sufficientFunds;
...
public Bank(){
    ...
    sufficientFunds=bankLock.newCondition();
}
```

如果transfer方法发现余额不足，调用sufficientFunds.await() 当前线程被阻塞，并放弃了锁。这种情况和等待获得锁的线程并不一致，一旦一个线程调用await()方法，它就会进入该条件的等待集。当锁可用时，该线程不能马上解除阻塞；相反，它处于阻塞状态，直到另一个线程调用同一条件下的signalAll方法时为止。 在这个例子中，体现为 其他线程转给from时，应该调用`sufficientFunds.signalAll();` 

这一调用重新激活因为这一条件而等待的所有线程。当这些线程从等待集中移出时，线程调度器将再次运行它们，它们将再次尝试获得对象锁，一旦锁可用它们中的某个线程将从await()调用中返回，获得该锁并从被阻塞的地方继续执行。此时会再次判断余额。

> 通常对await的调用都是在如下循环体中：
>
> ```java
> while(!(ok to processed)){
>     condition.await();
> }
> ```

当一个线程调用await()时没有办法激活自己，只能依赖于其他线程调用signalAll。所以很可能会导致一个经典的问题deadlock（死锁）现象。如果所有其他线程被阻塞，最后一个活动线程在解除其他线程的阻塞状态之前就调用了await()方法，它也会被阻塞。 没有任何其他线程可以解除其他线程的阻塞，该程序挂起。

所以何时调用signalAll就很重要；一般来说，**在对象的状态有利于等待线程的方向改变时调用它** 在这边的例子中可以理解为 当一个账户的余额发生了变化之后，等待的线程就有机会检查余额：

```java
// 转转业务，从from 转到 to amount数量的金额
public void transfer(int from, int to, double amount) {
    bankLock.lock();
    try {
        while(accounts[from]<amount)
            sufficientFunds.await();
        System.out.println(Thread.currentThread());
        accounts[from] -= amount;
        System.out.printf("%10.2f from %d to %d", amount, from, to);
        accounts[to] += amount;
        System.out.printf("Total Balance : %10.2f%n", getTotalBalance());

        sufficientFunds.signalAll(); //在余额发生变化时，通知其他因为余额不足不能转账的线程 
    } catch (InterruptedException e) {
        e.printStackTrace();
    } finally {
        bankLock.unlock();
    }
}
```

有一点非常重要，signalAll并不会立即激活一个等待线程，只是解除了等待线程的阻塞，以便这些线程可以在当前线程推出同步方法后，通过再次竞争获得锁对象。

而signal()方法会随机解除等待集中的一个线程阻塞状态，一看随机解除就知道这个方法不靠谱（除非等待级中就一个线程）。所以一般**我们只会在 一个线程拥有某个条件的锁时，可以在该条件上调用await，signal，signalAll。**

做完这所有的同步操作，会发现程序启动有点慢，这或许就是同步的代价吧。

当发生如下情况可能会产生死锁：假设程序只有两个线程

账户1:200

账户2:300

线程1：从账户1转移300到账户2，由于钱不够陷入阻塞

线程2：从账户2转移400到账户1，由于钱不够也陷入阻塞

两个线程都无法继续执行下去，造成死锁。在我们的程序中，因为有转账金额的限制最多转账1000，而总有账户余额是大于1000的所以永远不会造成死锁，如果把限制条件去掉，死锁很快就会发生。我们修改一下参数，让死锁更快发生（将账户数改为10，每次交易的金额上限为INITIAL_BALANCE*2）

<img src="https://github.com/krystalics/krystalics.github.io/blob/master/_posts/java/img/15.png?raw=true">

遗憾的是Java并没有任何东西可以打破这种死锁现象。所以需要开发人员有更高的并发编程能力，仔细设计程序来减少死锁发生。



##### 锁测试与超时

线程在调用lock方法时来获得另一个线程持有的锁的时候，很可能发生阻塞。所以我们可以换一个方法 tryLock() 它尝试申请一个锁，在成功获得锁之后就返回true；没成功也不会阻塞，而是返回一个false，线程不会因此阻塞。一般会搭配超时参数一起使用，毕竟尝试也要给人一点时间去尝试嘛

```java
try{
    if(bankLock.tryLock(100,TimeUnit.MILLISECONDS)){ //100毫秒的尝试时间
        try{
           // ...
        }finally{
            bankLock.unlock();
        }
    }else{

    }
} catch (InterruptedException e) {
    e.printStackTrace();
}
```

调用lock()时不能被中断，因为这是在申请锁，而调用带有超时参数的tryLock()，那么如果**线程在等待期被中断将抛出InterruptedException异常**，这个异常允许程序打破死锁。也可以调用 lockInterruptibly() 相当于超时设为无限的tryLock()。对应到等待一个条件时也可以设置一个超时 

```java
while (accounts[from] < amount)
    sufficientFunds.await(100,TimeUnit.SECONDS);
```

如上，如果一个线程被另一个线程通过signalAll或signal激活，或者超时时限已经达到，或者线程被中断 那么await()方法将返回。 如果在等待时间内被中断，await()方法将抛出InterruptedException异常。如果出现这种异常还希望继续等待就要调用awaitUninterruptedException() （虽然一般不会这么干）

值得注意的是：如果tryLock()返回true，那么这个方法就会抢夺那个锁，不管该锁是否是公平锁也不管其他线程已经等待很久了。相当于强盗，看到机会就抢。



##### 顺便说下读写锁

如果很多线程从一个数据结构中读取数据却很少修改其中数据，ReentrantReadWriteLock是十分有用的，读线程共享数据，写线程互斥。 简单说下使用步骤：

```java
//1. 构造一个 ReentrantReadWriteLock 对象
private ReentrantReadWriteLock rwLock=new ReentrantReadWriteLock();
//2. 抽取读锁和写锁
private Lock readLock=rwLock.readLock(); //排斥所有的写操作
private Lock writeLock=rwLock.writeLock(); //排斥其他读操作和写操作
//3. 对所有获取方法加读锁
public double getTotalBalance(){
    readLock.lock();
    try{...}
    finally{
        readLock.unlock();
    }
}
//4. 对所有修改的方法 加写锁
public void transfer(...){
    writeLock.lock();
    try{...}
    finally{
        writeLock.unlock();
    }
}
```



##### CompleteableFuture 

Java 5并发库主要关注于异步任务的处理，它采用了 producer线程创建任务并且利用阻塞队列将其传递给任务的consumer，这种线程模型在Java 7和8中进一步发展，并且开始支持另一种风格的任务执行方式

将任务的数据集分为子集，每个子集都可以独立且同质的子任务来负责处理。这种风格的基础库也就是fork/join框架，它允许程序员规定数据集该如何划分，并且支持将子任务提交到默认的线程池中，也就是通用的ForkJoinPool。

java 8中 fork/join并行功能借助并行流的机制变得更加具有可用性。但是不是所有任务都适合这种并行处理； 它所处理的元素必须是相互独立的，数据集足够大，并且在并行加速方面，每个元素的处理成本要足够高，这样才能补偿建立fork/join框架所消耗的成本。



##### 阻塞队列

上面介绍的一些概念都是Java并发程序设计的底层构建模块，然而，对于实际编程来说，我们应该尽可能远离底层把它交给更专业的来写（实际上，这样做不利于提高吧），对于很多线程问题都可以通过使用一个或多个队列以优雅且安全的方式将其形式化。

生产者线程像队列中插入元素，消费者线程从队列中取出元素。使用队列，可以安全地从一个线程像另一个线程传递数据。同步问题只需要交给阻塞队列就可以了，那不是我们的问题，只需要使用它就可以啦。

当试图向队列添加元素而队列已经满了，或是想从空队列中获得元素 阻塞队列（blocking queue）会导致线程阻塞。在协调多个线程之间的合作时，阻塞队列是很有用的工具。工作者线程可以周期性地将中间结果存储在阻塞队列中，其他的工作者线程溢出中间结果并进一步加工。队列会自动地平衡负载。如果第一个线程集比第二个慢，第二个线程集在等待结果时会阻塞。

阻塞队列分为3类：取决于队列满和空时他们的响应方式。如果队列作为线程管理工具来使用，将要用到put()和take()方法。

当试图向满队列put()或者空队列take()，add()， remove() ，element()操作抛出异常。在多线程环境下，队列任何时刻都有可能是满或者空，因此可以采用 offer（添加一个元素并返回true，队列满了返回false）,poll（**移除并返回队列头部**，队列为空则返回null）,peek（**返回队列头部**，队列为空返回null）方法作为替代。这些方法如果不能完成任务，只是给出一个错误提示而不会抛出异常。 

> poll() peek() 返回null 来表示失败，因此像阻塞队列插入null是非法的

offer和poll还可以传入超时设置，在一定时间内完成任务即可。 

```java
boolean success = queue.offer(x,100,TimeUnit.MILLISECONDS);
```

JUC包中提供了阻塞队列的几个实现：默认情况下 LinkedBlockingQueue的容量时没有上界的，也可以选择最大容量，LinkedBlockingDeque 是一个双端版本。ArrayBlockingQueue在构造时需要指定容量，并且有一个可选参数来设置公平性。PriorityBlockingQueue是一个带优先级的队列，元素按照优先级被顺序移出，该队列没有容量上限，但是如果队列是空的就会造成阻塞。













