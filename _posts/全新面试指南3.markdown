记录我认为比较重要的可能在面试中会遇到的一些问题，点

---

##### 线程池的工作原理

[线程池ThreadPoolExecutor的实现原理](https://juejin.im/post/5aeec0106fb9a07ab379574f)

这里的线程池指的是**ThreadPoolExecutor** ，其中的参数我已经知道了意思，这里就是从整体流程来明确一下它的过程

<img src="https://github.com/krystalics/krystalics.github.io/blob/master/_posts/img/58.png?raw=true">

其中拒绝策略也叫饱和策略，分为以下四种：

- AbortPolicy ： 直接拒绝该任务，并抛出`RejectedException`  **默认的拒绝策略**
- CallerRunsPolicy ：只用调用者所在的线程来处理该任务
- DiscardPolicy ：不处理直接丢弃掉任务
- DiscardOldestPolicy ：丢弃掉阻塞队列中存放最久的任务，执行当前任务。

简单的说一下参数：

```java
ThreadPoolExecutor(int corePoolSize, //核心线程数
                              int maximumPoolSize, //最大线程数
                              long keepAliveTime, //非核心线程无任务时的生存时长
                              TimeUnit unit, //生存时长的 单位，比如TimeUnit.Second 秒
                              BlockingQueue<Runnable> workQueue, //阻塞队列
                              ThreadFactory threadFactory, //线程工厂
                              RejectedExecutionHandler handler //拒绝策略) 
```

其中，阻塞队列可以选择 ArrayBlockingQueue 有界队列和 LinkedBlockingQueue 无界队列。要慎用无界队列，它的没有边界，意味着可能有很多任务都会压在队列中，导致内存不够用。

至于其中的 ThreadFactory，有默认的线程工厂 直接就会创建ThreadPoolExecutor。也有很多现成的类型，**所以我们一般不自己创建ThreadPoolExecutor，而是使用Executors的各种工厂方法**。

- Executors.newCachedThreadPool() ：创建一个可缓存的线程池，如果线程池长度超过处理需求，可回收空闲线程，若无可回收则会创建新线程

  ```java
  public static ExecutorService newCachedThreadPool() {
      return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                    60L, TimeUnit.SECONDS,
                                    new SynchronousQueue<Runnable>());
  }
  ```

- Executors.newFixedThreadPool()：创建一个长定线程池，可控制最大并发数，超出的线程在队列中等待 其中核心线程数等于最大线程数

- Executors.newShceduledThreadPool()：创建一个定长线程池，支持定时及周期性人物执行

- Executors.newSingleThreadExecutor ()： 创建一个单线程化的线程池，用唯一的工作线程保证所有任务按照指定顺序FIFO,LIFO或者优先级执行

像线程池提交任务(该任务必须是 Runnable或者 Callable)，有里两种方法

- executor.submit(task); 这个会返回一个Future，调用get()方法可以获得该任务的执行结果，但是调用future.get() 的线程会阻塞至拿到结果
- executor.execute(task); 这个不需要返回结果，直接提交



是在想自己创建，并且自己制定线程的创建策略 ，就可以如下：

```java
ThreadFactory factory=new ThreadFactory() {
    @Override
    public Thread newThread(Runnable r) {
        return new Thread(r);
    }
};
BlockingQueue workQueue=new ArrayBlockingQueue(10); //阻塞队列长度为10
//核心线程 10  最大线程20 非核心线程空闲时间60秒，阻塞队列 10，工厂如上
ThreadPoolExecutor executor=new ThreadPoolExecutor(10, 20, 60, TimeUnit.SECONDS, workQueue,factory);
```



##### MySQL 的索引

[什么时候会使用索引？](https://krystalics.github.io/2019/03/22/java%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/#13%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%B4%A2%E5%BC%95%E5%B0%A4%E5%85%B6%E6%98%AFmysql) 

[CyC MySQL](https://github.com/CyC2018/CS-Notes/blob/master/notes/MySQL.md) 



##### Redis

[CyC2018 Redis](https://github.com/CyC2018/CS-Notes/blob/master/notes/MySQL.md)

##### 其他知识——内存模型，

[Java内存泄露](https://krystalics.github.io/2019/04/25/Java%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/)

[本人OPPO 实习面试总结](https://krystalics.github.io/2019/05/10/OPPO%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/) 

[本人帆软 实习面试总结](https://krystalics.github.io/2019/05/29/%E5%B8%86%E8%BD%AF%E9%9D%A2%E8%AF%95/) 

##### IO

[Reactor与Proactor](https://krystalics.github.io/2019/08/06/Reactor%E4%B8%8EProactor/) 

[Java IO详解](https://krystalics.github.io/2019/07/18/java.io%E8%AF%A6%E8%A7%A3/)

[Java NIO详解](https://krystalics.github.io/2019/07/19/java.nio%E8%AF%A6%E8%A7%A3/)

[CyC2018 Java IO](https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20IO.md)

##### 大量数据排序去重

[内存限制的大量数据排序](https://krystalics.github.io/2019/08/05/%E5%86%85%E5%AD%98%E9%99%90%E5%88%B6%E7%9A%84%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E6%8E%92%E5%BA%8F/) 

##### Java 并发

[CyC2018 Java并发](https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md)

[ConcurrentHashMap的并发机制](https://juejin.im/post/5aeeaba8f265da0b9d781d16) 

使用HashMap在并发的情况下扩容可能会发生循环引用，CPU使用接近100%。所以HashMap并不是线程安全的，ConcurrentHashMap解决了这个问题，并在Jdk1.8中发生了较大变化

1.8舍弃了segment，并且大量使用了synchronized(原本是使用ReentrantLock，因为synchronized做了很多优化，性能上已经不差了) 以及CAS无锁操作以保证ConcurrentHashMap的操作是线程安全的。

通过锁住 Node 而不是 segment 来减小锁的粒度。使用三个CAS操作来确保node的操作原子性，这种方式代替了锁

##### Java 虚拟机 

[CyC2018 Java虚拟机](https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md)

##### 集合类库

[CyC2018 java容器](https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%AE%B9%E5%99%A8.md)

##### SpringBoot 

[自动配置](https://segmentfault.com/a/1190000018011535)

关键是 `@EnableAutoConfiguration`启用自动配置，内部实际上是去加载 `META-INFO/spring.factories`文件的信息后，筛选出`EnableAutoConfiguration`为key的数据，加载到IOC容器中，实现自动配置。

- 而`META-INFO/spring.factories`是指 所有jar 包下的该文件，将其包装到Properties对象中
- 从Properties对象获取到key值为`EnableAutoConfiguration`的数据，然后添加到容器里面



---

#### 业务场景

##### 1.SQL注入

[Mysql Injection](https://www.pediy.com/kssd/pediy12/113294/809747/43528.pdf)  [渗透攻防web篇—SQL注入攻击初级](https://paper.seebug.org/15/#_1)

Mysql 注入产生原因： 程序执行中未对敏感字符进行过滤，使得攻击者传入恶意字符串与结构化数据查询语句合并，并执行恶意代码；比如下面的sql语句，在手写sql的时候，或者使用Hibernate其实都会遇到sql注入的情况

实际上 where 子句返回的是一个bool值，如果为true 就将该记录添加进结果集

```sql
select * from users where id = 1;
select * from users where id = 1 and 1=2;  // 1=2为false，也就是说无论前面id是否等于1 ，最终结果都不会添加进结果集，因为where子句的结果都为false
select * from users where id = 1 or 1=1; //where 子句的结果都为true，所以能够得到该表中的所有记录
```

是不是有种很神奇的感觉。还有更加神奇的操作，Union 用于合并两个select语句，执行第二条查询语句将返回值和本次查询值合并。 **两次查询的列数要保证一致**，否则会出语法错误。

```sql
 select * from account where accountId = 1 union select 1,2,3
```

第二个select语句值查询了第一列，第二列和第三列，这是个很有用的特性，比如我们想办法绕过登录验证时起到一些作用： [人人都可学会的MySQL高级注射技巧](https://paper.seebug.org/27/)

假设一个验证登录的sql语句如下

```sql
select * from users where username='${username}' and password='${password}'
```

其中 username和password 都是从表单中提取出来的，使用union是怎么绕过去的呢？

我们可以在 username的输入框中输入 `xxx' union select 1,'admin','password'#` 最后的井号在sql中是注释的意思，注释掉 后面`password='${password}'` 。整个sql执行的语句如下

假设这个表只有三列：

```sql
select * from users where username='xxx' union select 1,'admin','123456'
```

前面执行的结果不存在，整个语句的查询结果自然就变成union后面的查询了。`userid=1,username=admin,password=123456`

所以在password输入框 输入123456即可登录啦。



##### 2.后台防止重复数据提交

前端可以让提交数据的按钮变灰，不能重复提交。但是这也需要时间，还是很可能在极短时间内发生重复提交事件；还有**加验证码**（每提交一次，都要通过验证码，以前一直不知道验证码什么作用，现在知道了，限制重复提交）。

不过不能相信太前端，后台也需要进行限制，其中一种方法就是 token 指令

##### Java 使用Token令牌防止表单重复提交的步骤：

- 在服务端生成一个唯一的随机标识号，专业术语叫token，同时在当前用户的Session域中保存这个token
- 将token发送到客户端的Form表单中，在Form表单中使用隐藏域来存储这个Token，表单提交的时候会连同这个Token一起提交到服务器
- 在服务端判断客户端提交上来的Token与服务器端生成的Token是否一致，如果不一致，就说明重复提交了，此时服务器端就可以不处理重复提交的表单。如果Token一致，则处理完后清除当前用户的Session域中存储的标识号。
- 当前用户的Session中不存在Token时，也不处理表单请求

##### 3.手写数据库连接池

```java
package com.company;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class DBPool {
    private int init_count = 5; //连接池中 初始的连接数 ,默认为5个
    private final int MAX_COUNT = 10; //最大连接数
    private int current_count = 0; //当前正在使用的连接数

    private List<Connection> pool = new ArrayList<>(); //连接池，

    public DBPool(int initCount) {
        this.init_count = initCount;
        init();
    }
    
    public DBPool(){
        init();
    }

    private void init() {
        for (int i = 0; i < init_count; i++) {
            Connection connection = createConnection();
            pool.add(connection);
        }
    }

    public Connection createConnection() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            return DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "root", "root");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public Connection getConnection() {
        if (!pool.isEmpty()) {
            current_count++;
            return pool.remove(0); //将连接池中第一个链接拿出来
        }
        if (current_count < MAX_COUNT) { //如果正在使用的连接数 小于 最大连接数
            current_count++;
            return createConnection(); //新建一个连接
        }

        throw new RuntimeException("连接数达到最大值");
    }

    /**
     * 释放正在使用的连接，放回到连接池
     */
    public void releaseConnection(Connection connection) {
        if (pool.size() < init_count) { //小于核心连接数
            pool.add(connection);
            current_count--;
        } else { // 连接池中的容量大于核心连接数
            try {
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}

```





























