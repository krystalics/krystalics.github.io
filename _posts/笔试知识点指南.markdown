#### 记录秋招中积累的零碎知识点：

哪种协议同时使用TCP和UDP？		 [DNS同时使用TCP和UDP？](https://blog.csdn.net/fly_yr/article/details/51374938)

**DNS**：DNS同时占用UDP和TCP端口53 是比较好知道的。但是它分别在什么情况下使用TCP和UDP呢？

我们知道TCP和UDP最大的区别在于TCP的消息传输是可靠的，而UDP是不可靠的。而且TCP因为握手动作等占用系统开销比较大，所以UDP速度会更快一些：比较适合于对可靠性要求不高的服务。

DNS有两种服务器，1.主DNS服务器 2.辅助DNS服务器。 主服务器会从自己的数据文件中读取该区的DNS数据信息，辅助则是从主服务器中通信读取并加载，这个过程叫区传送zone transfer 

还有一个点就是**UDP一次能够传输的最大数据量是512B**，当DNS查询超过512字节时，协议的TC标志出现删除标志，这时则使用TCP发送，通常传统的UDP报文不会大于512字节。

域名解析时就使用UDP协议，不用经过三次握手，DNS服务器负载更低，响应更快。而且事实上很多DNS服务器只支持UDP查询包。



##### Enum类型的使用

Java中的Enum其实就和普通的类没什么区别，它的特点是 默认继承了 java.lang.Enum，所以不能extends别的类了。

```java
public enum Type {
    //这里的SHORT，INT，LONG其实就是一个个Type的实例，enum也经常用来做单例的设计，后面的数字是他们的默认值
    SHORT(0), INT(1), LONG(2);
    int type;

    Type(int type) {
        this.type = type;
    }

    enum type2 {S, I, L}

    public static void main(String[] args) {
        System.out.println(Type.SHORT.type); //short.type = 0
        System.out.println(type2.S); //这里只是表示类型
    }
}
```



##### Linux中统计一段代码耗时

笔试题中碰到，随手记下来，虽然之后估计不会看。

clock_gettime()：精确到**纳秒** **库函数**

gettimeofday() ：精确到**微妙** **库函数**

time ：精确到秒

clock ：精确到毫秒



##### CPU分支预测

[深入理解CPU的分支预测 Branch Prediction 模型](https://zhuanlan.zhihu.com/p/22469702)

参考文章中先是给出了一个例子：用256的模数随机填充一个固定大小的大数组，然后对数组的一半元素求和。

```c++
for (int i = 0; i < 100000; ++i)
{
    // Primary loop
    for (int c = 0; c < arraySize; ++c)
    {
        if (data[c] >= 128)
            sum += data[c];
    }
}
```

得到结果是：排序后计算 和 没有排序计算 的效率比是3:1。为什么排序后的速度比排序之前更快呢？

上述程序中有个 if 判断语句，按照我们的想象中的逻辑无论数组排序与否，都是要经过这个判断的，不应该有速度上的差异。这个就涉及到CPU的分支预测

联想到现实中的火车遇到弯道，司机看到岔路会将火车开到正确的轨道上，假如有一次开错了方向火车想要回到正确的道路就会耗费大量的时间。现代的CPU也是这样的，CPU的运行速度非常的快

当CPU看到这条分支的时候会尝试预测结果（这个结果和之前的历史数据相关，假如之前几个数据都是 小于，那么CPU就会预测下一个数据也是小于）， 

要知道，现代编译器是非常复杂的，运行时有着非常长的pipelines， 减速和热启动将耗费巨量的时间。

那么，有没有好的办法可以节省这些状态切换的时间呢？你可以猜测分支的下一步走向！

- 如果猜错了，处理器要flush掉pipelines, 回滚到之前的分支，然后重新热启动，选择另一条路径。
- 如果猜对了，处理器不需要暂停，继续往下执行。

如果每次都猜错了，处理器将耗费大量时间在停止-回滚-热启动这一周期性过程里。如果侥幸每次都猜对了，那么处理器将从不暂停，一直运行至结束。

上述过程就是分支预测(branch prediction)。虽然在现实的道口铁轨切换中，可以通过一个小旗子作为信号来判断火车的走向，但是处理器却无法像火车那样去预知分支的走向--除非最后一次指令运行完毕。

**所以排序后的数组运行程序更快**。我们可以通过其他方式来避免分支预测，比如文章中给出的位运算，

```c++
|x| >> 31 = 0 # 非负数右移31为一定为0
~(|x| >> 31) = -1 # 0取反为-1

-|x| >> 31 = -1 # 负数右移31为一定为0xffff = -1
~(-|x| >> 31) = 0 # -1取反为0

-1 = 0xffff
-1 & x = x # 以-1为mask和任何数求与，值不变
```

所以分支语句可以转换为；

```c++
int t=(data[c]-128)>>31; //if data[c]>=128 t=0,~0=-1 & data[c]=data[c]
sum+=~t&data[c]; //if data[c]<128 t=-1 ~t=0  & data =0
```



##### 二分查找的left和right的取值

[二分查找有几种写法？它们的区别是什么？](https://www.zhihu.com/question/36132386)

[left,right)   左闭右开，



##### Windows内核进程

- 临界区：只能同步一个进程中的线程，不能跨进程同步。一般用来做单个进程内的代码块同步
- 内核事件：多用于线程间通信，可以跨进程同步
- 互斥量：可以跨进程同步，还可以用来保证程序只有一个实例运行(创建命名互斥量)，也可以用来做线程间的同步
- 信号量：允许同时访问，不过限制线程数量



##### UTF8编码

数字和字母占 1 个字节

多数汉字占3个字节，少数汉字4个字节。



##### 构造函数private

当类中只有private构造函数，子类就不能构造它们，所以也就没有子类。



##### MySQL Count(1)

相当于Count(*) ，都包含 null，而Count(Column) 是特定列的行数



##### 单例模式中的各个具体名词 

[Java单例模式的不同写法](https://blog.csdn.net/fly910905/article/details/79286680)

**饿汉模式**：一开始就创建了 `private static Singleton instance=new Singleten()` 实例，只需要等待调用，所以不存在并发错误

**懒汉模式**：只有等到需要时才new出对象，是在一个方法中new对象，所以可能出现并发的情况，需要加个锁

```java
public class Singleton{
    private static Singleton instance = null;
    private Singleton(){}
    public static Singleton newInstance(){
        if(null == instance){
            instance = new Singleton();
        }
        return instance;
    }
}
```



**双重校验锁**

```java
public class Singleton{
    private volatile static Singleton instance;
    private Singleton(){}
    public static Singleton getInstance(){
        if(instance==null){
            synchronized(Singleton.class){
                if(instance==null) //这一步是因为 当一个线程正在创建实例时，另一线程正在等待，当它创建完时，需要被可知，所以是volatile 。另一个等待的线程会检查instance
                    instance=new Singleton();
            }
        }
        return instance;
    }
}
```



**静态内部类**

```java
public class Singleton{
    private static class SingletonHodler{
        public static Singleton instance=new Singleton();
    }
    private Singleton(){}
    public static Singleton getInstance(){
        return SingletonHodler.instance;
    }
}

```

上面的实现是利用了Jvm的类加载机制来实现的单例，并不用担心并发的情况。也可以实现延迟加载，因为只有调用内部类的时候才回去实例化



看到这里是不是觉得万事大吉了？nonono

还可以利用**枚举类**来实现单例，这是Effective-java推荐的方式

```java
class Resource{
    
}
public enum A{
    INSTANCE;
    private Resource resource;
    private A(){
        resource=new Resource();
    }
    public Resource getInstance(){
        return resource;
    }
}
```

因为枚举类中的每个实例都是 static final 的，所以Resource只会被实例化一次 因为我们定义的枚举类中只有一个 实例 INSTANCE。 `A.INSTANCE.getInstance()`就可以获得唯一的对象资源 Resource



以上的模式都有个共同的**缺陷**：

- 需要额外的 序列化工作，否则每次反序列化一个序列化对象的时候都会创建一个新的实例
- 可以使用反射强行调用私有构造器(这个时候我们可以 修改构造器，让它在创建第二个实例的时候抛出错误)



##### 正则表达式

\d 为数字      \D 非数字



##### CAP

在[理论计算机科学](https://zh.wikipedia.org/wiki/%E7%90%86%E8%AB%96%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)中，**CAP定理**（CAP theorem），又被称作**布鲁尔定理**（Brewer's theorem），它指出对于一个[分布式计算系统](https://zh.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97)来说，不可能同时满足以下三点：[[1\]](https://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86#cite_note-Lynch-1)[[2\]](https://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86#cite_note-2)

- 一致性（**C**onsistency） （等同于所有节点访问同一份最新的数据副本）
- [可用性](https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%94%A8%E6%80%A7)（**A**vailability）（每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据）
- [分区容错性](https://zh.wikipedia.org/w/index.php?title=%E7%BD%91%E7%BB%9C%E5%88%86%E5%8C%BA&action=edit&redlink=1)（**P**artition tolerance）（以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择[[3\]](https://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86#cite_note-3)。）

根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项[[4\]](https://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86#cite_note-4)。理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。

​	所以 CP 和AP  中一般保证AP，然后保证最终一致性是业界一般做法。



##### 各种Join

https://www.nowcoder.com/questionTerminal/75a8737dbed14ca88fea2e04000b7cf5

来源：牛客网

Inner join：又称为等值连接，只选择满足条件的行  

   Outer join：外连接会保存没有关联的行   

- ​     left outer join：保存左边表的所有行    
- ​     right outer join：保存右边表的所有行    
- ​     full join：保存所有没有关联的行，当某行在另一个表中没有匹配行时，则另一个表的列为空值



##### 私有网段

10.0.0.0/8:10.0.0.0-10.255.255.255
172.16.0.0/12:172.16.0.0-172.31.255.255
192.168.0.0/16:192.168.0.0-192.168.255.255



##### JVM什么情况下会触发Full GC(Major GC)

旧生代空间不足

Permanet Generation（永久代）空间满

统计得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间

可以使用 Jmap dump查看JVM内存状态。



##### String 为什么要设计成不可变

这涉及到的问题比较多，比如内存，数据结构，线程安全等。

要知道String的值实际上是字符数组，由于是private final 所以我们说String都是不可变的

```java
 /** The value is used for character storage. */
    private final char value[];
```

实际上我们可以通过反射来改变value，不过这基本用不到。



##### 1.字符串常量池的需要

字符串使用率特别高，内存占用大，所以优化成了---》字符串常量池是Java堆内存中一个特殊的存储区域，当创建一个String对象时，假如该值在常量池中，那么这个对象的引用就会指向这个值。

```java
String s1="abc";
String s2="abc";  //s1与s2是指向同一个 内存 s1==s2 true
```

<img src="https://github.com/krystalics/krystalics.github.io/blob/master/_posts/img/59.png?raw=true">

由于String对象的hash值经常被使用，所以它有个hash属性

```java
private int hash; //缓存hashcode
```

字符串不变性保证了hash码的唯一性，因此可以不用担心hash变化，不用每次变化都计算一遍hash值。

##### 2.安全性

String被许多Java类库 用来当做参数，例如 网络连接地址URL，文件路径path，还有反射机制需要的String参数等。假如String可以变化，那么会有很多安全隐患，

```java
boolean connect(String s){
    if(!isSecure(s)){
        throw new SecurityException();
    }
    //关于s的其他操作，假如 String 可变，s 其他方法中被修改了，下面的操作可能就有问题了。
}
```



而String或者说其他**对象和基础类型的局部变量没有经过初始化的时候，是不能参与运算的**。属于**类变量的时候，JVM会把它们自动赋默认值，可以参与运算**。

```java
String s;
String s1="s"+s; //编译错误，s没有初始化
////////
public class A{
    String s;
    public void test(){
        String s1="s"+s; //没问题，jvm自动赋值s=null
        int a;
        int b=a+1; //编译错误，a没有初始化
    }
}
```

​	

##### Java 移位运算

```
<< 左移运算符
>> 右移云算符
>>> 无符号右移，忽略符号位，空位都以0补齐
```

还有一个重点，Java的负数的二进制码是这样的  `-1   11111111 11111111 11111111 11111111` 

`-2  11111111 11111111 11111111 11111110`  基本和2的二进制一样，就是前面的符号位为1，而无符号右移和右移的差异就在于负数的运算上，

```java
System.out.println(-1>>>5); //00000111111111111111111111111111  正数
System.out.println(-1>>5);  //11111111111111111111111111111111  还是负数 -1
```



#####  new ArrayList(20); 扩容几次?

A.0  B.1  C.2  D.3

这里要注意，这是一类问题，不过**ArrayList的默认初始容量是 10**，**HashMap的默认初始容量是16**。不过如果一开始new的时候指定容量，比如上题**，不会触发扩容，所以是0次**。

扩容策略也不一样，ArrayList `int newCapacity = oldCapacity + (oldCapacity >> 1);` 容量为原来的1.5倍； HashMap `newCap = oldCap << 1` 为原来的两倍

Vector初始为10，增长为原来两倍。

##### Integer 变量对比

这个考的是一个知识点，用Integer初始化的变量，在-128~127的范围内会将值放到常量池中，超出范围之后就是两个对象了。类比Double，Boolean 等

```java
Integer a=127,b=127;
System.out.println(a==b); //true
Integer a=-128,b=-128;
System.out.println(a==b); //true

Integer a=-130,b=-130;
System.out.println(a==b); //false
Integer a=128,b=128;
System.out.println(a==b); //false
```



##### OOM ： Metaspace

从Jdk1.8之后，原本的PermGen(永久代，方法区)变更为了Metaspace，永久代里面主要存储的是类信息：例如，class 名称，字段，方法，字节码(个类的class文件)，常量池，JIT优化代码(被inline)等，而改成元空间之后，只存储类信息：

方法区是一个 JVM 规范，永久代与元空间都是其一种实现方式。在 JDK 1.8 之后，**原来永久代的数据被分到了堆和元空间中。元空间存储类的元信息，静态变量和常量池等放入堆中**。

所以会造成 Metaspace OOM，原因就是**加载到内存的class数量太多，或者体积太大了**，



##### SynchronousQueue

不同于ArrayBlockingQueue和LinkedListBlockingQueue，SynchronousQueue内部并没有缓存空间，**数据是在配对的生产者和消费者线程之间直接传递的。**也就是说，每当有线程要插入，就必须要等另一个取数据的线程一起，反之也是相同的。那直接传就好了，为啥还要这个SynchronousQueue呢？**把这种传递的过程引入第三方便于管理，然后使用队列还可以支持公平策略或者非公平策略** 

常用于线程池，传入的阻塞队列就可以是这个，不过它的容量一直为0。



##### JVM规定的类被初始化的情况

遇到4条JVM字节码指令：new，getstatic，putstatic，invokestatic 。如果类还没初始化，则需要先触发其初始化。最常见的Java代码场景是：

- 使用new 关键字实例化对象
- 读取一个类的静态字段 (同时被final 修饰，在编译期已经放入常量池的静态字段除外)
- 调用一个类的静态方法
- 反射
- 先父类



##### 稳定排序与不稳定

稳定：冒泡，插入，归并，基数排序

不稳定：选择，快速，希尔，堆排序



##### Thread.yield()

该调用声明了当前线程已经完成了生命周期最重要的事，可以切换给其他线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其他线程可以运行。

```java
public void run(){
	Thread.yield();
}
```



##### 线程之间的协作

在线程中调用另一个线程的join()方法，会将当前线程挂起，转去执行另一个线程，等另一个线程执行完毕才会转回来执行该线程。

```java
public static void main(){
    Thread a=new Thread(() -> System.out.println("A"));
    Thread b=new Thread(() -> {
        try {
            a.join(); //先执行a线程
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("B");
    });
    
    b.start();
    a.start();
}
```

先打印A，然后再打印B。



##### AQS

CountDownLatch，CyclicBarrier 都是栅栏，不过后者可以循环使用。都是通过 `countDownLatch.await() ; cyclicBarrier.await();` 来做栅栏。

Semaphore 信号量则是 `semaphore.acquire()`来阻拦 `semaphore.release()` 释放